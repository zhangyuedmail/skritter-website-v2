gelato-component(data-name='mobile-vocab-viewer-content')

  if view.vocabs && view.vocabs.length
    - var items = view.items;
    - var vocab = view.vocabs.at(0);
    - var altVocab = vocab.getWritingDifference();
    - var differentAltVocab = altVocab && altVocab !== vocab;
    - var containingVocabs = view.getContainingCharacters();
    - var containingWords = view.getContainingWords();
    - var decomp = vocab.getDecomp();
    - var definition = vocab.getDefinition();
    - var mnemonic = vocab.getMnemonic();
    - var sentence = vocab.getSentence();

    #header-section
      .row
        .col-xs-2.pull-left
          a(href='#', data-dismiss='modal')
            i.fa.fa-close
        .col-xs-6.text-center
          #vocab-difficulty-text.toughness-label LEVEL
          #vocab-difficulty.toughness= vocab.get('toughnessString')
        .col-xs-2
          if vocab.isStarred()
            i#button-vocab-star.icon.icon-study-word-star-filled
          else
            i#button-vocab-star.icon.icon-study-word-star
        .col-xs-2
          i#button-vocab-ban.icon.icon-study-ban(class=vocab.isBanned() ? 'banned' : '')
            svg
              path(d="M11.52 0C5.16 0 0 5.16 0 11.52 0 17.88 5.16 23.04 11.52 23.04 17.88 23.04 23.04 17.88 23.04 11.52 23.04 5.16 17.88 0 11.52 0L11.52 0ZM11.52 20.64C6.48 20.64 2.4 16.56 2.4 11.52 2.4 6.48 6.48 2.4 11.52 2.4 16.56 2.4 20.64 6.48 20.64 11.52 20.64 16.56 16.56 20.64 11.52 20.64L11.52 20.64Z" id="Shape" sketch:type="MSShapeGroup")
              path(d="M18.63 4.38L4.62 18.38" id="Line" stroke-width="2" stroke-linecap="square" sketch:type="MSShapeGroup")
      .row(class=differentAltVocab ? '' : 'text-center')
        div(class=differentAltVocab && vocab.get('writing').length < 3 ? 'col-xs-6 separator' : 'col-xs-12')
          #vocab-writing(class=vocab.getFontClass() +　' vocab-writing')= vocab.get('writing')
        if differentAltVocab

          // if it's 1 or two characters, it can fit on the same line. If not, it needs to go on a new one.
          - var altVocabColSize = altVocab.length > 2 ? 12 : 6;
          div(class="col-xs-" + altVocabColSize)
            .vocab-writing(class=vocab.getFontClass())
              span.alt-bracket.alt-bracket-l 【
              span.alt-writing= altVocab
              span.alt-bracket.alt-bracket-r 】
      .row.text-center
        .col-xs-12
          #vocab-reading.vocab-reading= vocab.getReading()
          #vocab-definition
            if view.editing
              textarea.definition.edit-textbox= definition
            else
              if definition
                span.definition!= definition
              else
                em.defintion Click the 'edit' icon to add a definition

      .row.edit-row
        .col-xs-6.text-left
          if app.isMobile() && vocab.isChinese()
            if app.dicts.pleco
              img#pleco-icon.dict-icon(src='media/images/icon-pleco.png')

            if app.dicts.hanpingPro
              img#hanping-pro-icon.dict-icon(src='media/images/icon-hanping-pro.png')
            else if app.dicts.hanpingLite
              img#hanping-lite-icon.dict-icon(src='media/images/icon-hanping-lite.png')

            if app.dicts.hanpingYue
              img#hanping-yue-icon.dict-icon(src='media/images/icon-hanping-yue.png')
        .col-xs-6.text-right
          if view.editing
            i#save-vocab.fa.fa-2x.fa-save
          else if app.user.isLoggedIn()
            i#edit-vocab.fa.fa-2x.fa-pencil-square-o


    #content-section
      if decomp
        .row
          .block
            .header Decomposition of #{vocab.get('writing')}
            .value
              #vocab-decomps
                for child in decomp.get('Children')
                  div
                    span.spr= child.writing
                    if vocab.isChinese() && (app.user.get('readingChinese') === 'zhuyin')
                      span.spr= app.fn.pinyin.toZhuyin(child.reading)
                    else if  vocab.isChinese()
                      span.spr= app.fn.pinyin.toTone(child.reading)
                    else
                      span.spr= child.reading
                    span.spr :
                    if app.user.get('showHeisig') && child.heisigDefinition
                      em= child.heisigDefinition + ' - '
                    span= child.definitions.en

      if containingVocabs.length > 1
        .row
          .block
            .header.contained-header Characters contained #{vocab.get('writing')}
            .value
              #vocab-characters-contained
                for model in containingVocabs
                  if model.get('writing') != vocab.get('writing')
                    div
                      span.spr.writing.contained-writing(class=vocab.getFontClass())= model.get('writing')
                      span.spr.reading= model.getReading()
                      span.spr :
                      span.definition= model.getDefinition()

      if containingWords.length > 1
        .row
          .block
            .header Words containing #{vocab.get('writing')}
            .value
              #vocab-words-containing.vocab-words-containing
                for model in containingWords
                  div
                    span.spr.writing(class=model.getFontClass())= model.get('writing')
                    span.spr.reading= model.getReading()
                    span.spr :
                    span.definition= model.getDefinition()
              if containingWords.length > 5
                - var remainingContainedWords = containingWords.length;
                .text-center
                  #show-more-contained.btn.btn-success Show all #{remainingContainedWords} words

      .row
        .block
          #sentence-container

      .row
        .block
          .header Mnemonic
          .value
            #vocab-mnemonic
              if view.editing
                textarea.mnemonic.edit-textbox= mnemonic ? mnemonic.text : ''
              else
                if mnemonic && mnemonic.text != ''
                  span!= app.fn.textToHTML(mnemonic.text)
                else
                  em Click the 'edit' icon to add a mnemonic

        if items && items.length
          .block
            table.table
              thead
                tr
                  th Part
                  th Next
                  th Last
                  //th Time
                  th
              tbody
                for item in items.models
                  tr.item-row(data-id=item.id, data-part=item.get('part'))
                    //TODO: move this logic to the item model
                    td= _.capitalize(item.get('part'))
                    td= item.get('next') > moment().unix() ? moment(item.get('next') * 1000).from() : 'Ready'
                    td= item.get('last') ? moment(item.get('last') * 1000).from() : '-'
                    //td= item.get('timeStudied') ? Math.round(item.get('timeStudied')) + ' seconds' : '-'
  else
    #header-section
      .row
        .col-xs-6
          a(href='#', data-dismiss='modal')
            i.fa.fa-close
          .header-writing= view.vocabWriting || ''
        .col-xs-6.text-right
          if app.isMobile() && app.isChinese()
            if app.dicts.pleco
              img#pleco-icon.dict-icon(src='media/images/icon-pleco.png')

            if app.dicts.hanpingPro
              img#hanping-pro-icon.dict-icon(src='media/images/icon-hanping-pro.png')
            else if app.dicts.hanpingLite
              img#hanping-lite-icon.dict-icon(src='media/images/icon-hanping-lite.png')

            if app.dicts.hanpingYue
              img#hanping-yue-icon.dict-icon(src='media/images/icon-hanping-yue.png')
    #content-section.text-center
      i.fa.fa-3x.fa-spinner.fa-pulse
